package cn.wjb114514.bridge;

/**
 * 抽象层负责 1.聚合实现层的实现子类 2.允许子类继承抽象层，以对实现层实现子类的方法的进一步加强
 * 这样，实现层的实现子类 完成了对品牌信息的描述，而抽象层的实现子类，完成了对手机样式的描述
 * 达成了抽象层和实现层的解耦，即我们原来需要基于继承完成实现层和抽象层的关联。
 * 这就要求我们 无论是增加抽象层和实现层里的哪一个，都要兼顾另一个。比如我们增加一个品牌，就需要兼顾此品牌对应的所有手机样式
 * 而增加一个手机样式，就必须兼顾所有的品牌，
 * 但我们使用聚合方式后，达到了抽象层和实现层的分离。我们增加一个品牌时，不需要兼顾所有手机样式，因为兼顾的工作 “桥”替我们完成了
 * 因此类的增加从乘法变成了加法，解决了类爆炸的问题。
 *
 *   抽象子类 --> 抽象层 -->(实现层) 实现子类。
 *   抽象层聚合实现层，达成了组合代替继承的目的
 *   其中，抽象子类聚合实现子类的工作，由抽象层完成，因此抽象层起到了桥接的作用、
 */
// 此类充当抽象层
public abstract class Phone {
    // 内部聚合了实现层
    private Brand brand;

    public Phone(Brand brand) {
        super();
        this.brand = brand;
    }

    // 抽象层的方法依赖于实现层的实现子类实现。
    protected void open() {
        brand.open();
    }

    // 本类，本包的类，子类，非子类外包类。
    protected void close(){
        brand.close();
    }

    protected void call() {
        brand.call();
    }
}
