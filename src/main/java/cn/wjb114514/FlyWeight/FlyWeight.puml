@startuml
'https://plantuml.com/class-diagram

'抽象的享元角色。是多个产品的抽象类，提取了产品之间的相同。
'同时定义出对象的外部状态[频繁变化的，每个对象都不太一样]和内部状态[稳定的，不变的转态]的接口/实现
'对内部状态的实现，就可以进行共享，而外部状态的实现，一般不可以共享
abstract class FlyWeight{}

'具体的享元对象，实现了享元角色的操作
class ConcreteFlyWeight{}
FlyWeight <|-- ConcreteFlyWeight

'享元模式中不共享的部分
class UnsharedConcreteFlyWeight{}

'用于构建一个池的容器，以及用于提供从池中获取对象的方法。池中用于存储可以共享的享元对象。
class FlyWeightFactory{}


'享元模式必须要分析出内部状态和外部状态，享元模式的需求:细粒度和共享对象
'比如前面的网站需求，网站的结构就是共享对象，而细粒度指的是各个享元对象不是太大的。如果享元对象太大
'需要提取的部分也特别大，这样对工厂[池]的开销也太大，得不偿失。对于大对象尽量还是用的时候再获取，而不是提前加载

'内部状态指对象共享出来的 信息， 存储在享元对象内部，不随环境改变而改变
'外部状态指对象得以依赖的一个标记，随环境改变而改变

'比如1000个人下棋，假如服务器需要维护两个对象：棋盘对象[记录棋子坐标] 棋子对象。
'对于服务器而言，棋盘对象需要给1000个人都分配一个，因为不可能这1000个人都按照一样的坐标下棋。
'但是棋子对象，没有必要给1000个人都分配一个，而是1000个人共用一个，因为棋子不论如何都是不变的对象。只有黑子和白子
'因此使用享元模式，让1000个人操作同一个棋子对象[这里指黑子对象和白子对象的统称]


@enduml