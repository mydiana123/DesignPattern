package cn.wjb114514.Factory.AbstractFactory;

/**
 * 抽象工厂模式，先定义一个interface 用于创建相关或由依赖关系的对象簇 而无需指明具体的类
 * 抽象工厂模式可以将简单工厂模式和个工厂方法模式 进行整合
 * 从设计层面上来看。抽象工厂模式就是对简单工厂模式的改进，或者是进一步的抽象
 * 将工厂抽象为两层(我们的工厂模式就是在 实体对象和创建实体的对象上加了一层工厂层)
 * 程序员可以根据创建对象的类型使用对应的工厂子类，这样将单个简单的工厂类变成了工厂簇，更利于代码的开发和维护
 *
 * 工厂模式的意义：
 * 将实例化对象的代码提取出来
 * 这样，创建实例化的代码无需直接依赖相关实体，而是依赖相关工厂。
 * 这样实例类的变化，只会导致工厂类的变化，实现了实例类和主项目的解耦
 * 工厂模式：
 * 简单工厂(静态工厂) 工厂方法模式 抽象工厂模式
 * 设计模式的依赖抽象。 避免直接操作实体对象，而是操作一个抽象的工厂方法来返回。相当于依赖了抽象
 * 抽象的本质就是缓冲层，相当于把实体对象和抽象实现类的依赖关系，增加了一个抽象层的缓冲
 *                  实例对象
 *                   抽象层
 *                  抽象实现类
 * 把实体对象 - 实体类 的依赖模式， 转变为 实体对象 - 抽象层 - 实现类 的模式， 可以尽可能的达到实体对象和实体来之间的解耦合
 *
 *
 *
 * // 这里体现了工厂模式 在使用时，我们只需要调用Calendar.getInstance(); 此方法内部使用了Calendar的createCalendar()方法。我们无需了解createCalendar()方法的细节，就可以获得实例对象
 * 也就是说，实例对象的过程，被单独提取出来，复杂的逻辑判断在工厂方法内完成，我们最后通过工厂方法直接获得对象，这样，当实体类发生变化时，只需要针对工厂/工厂方法修改，尽可能的实现了ocp原则
 * 相比于之前的披萨订购，orderPizza用于完成对PizzaFactory类生成的pizza做进一步的加工，pizzaStore用于作为"服务器"
 * 但是在Calendar类里，完成了所有功能，首先Calandar.createCalenda() 相当于PizzaFactory.createPizza();
 * 之后OrderPizza()对Pizza对象的加工，以及PizzaStore作为小型服务器 这两个类在Calandar里暂时不需要，所以Calandar可以认为是一个工厂类！
 *
 * 傳統方案訂購披薩
 * 创建Pizza的类和Pizza实体类进行了多对多的关联，操作不便！
 * 增加Pizza实体类时，需要对所有创建Pizza的类进行修改，严重违反了ocp原则
 *
 * 简单工厂模式
 * 简单工厂模式是工厂模式家族最简单的，可以把创建Pizza的方法进行封装
 * 相当于我们在创建Pizza的类和Pizza实体类之间，增加了一层抽象层Factory。
 * 相当于创建Pizza的类通过组合关系和Factory关联，同时Factory和多个Pizza实体类进行关联，形成多对一对多的关系
 * 这样Pizza实体类修改时，只需要修改Factory，尽量遵守了ocp原则！
 *
 * 工厂方法模式：目的：把多对多的关系，通过增加抽象层，变为多对一对多，其中对一的部分就是抽象工厂层
 * 创建Pizza的类比较细致，这样工厂就有很多，我们刚刚建立的 多对一对多的模型，又变成了多对多对多，不利于维护
 *  创建Pizza的类1  创建Pizza的类2 创建Pizza的类3
 *       工厂1   工厂2    工厂3
 *   Pizza实体类A PizzaB  PizzaC
 *
 *   改为：
 *
 *     第一层   创建Pizza的子类A  创建Pizza的子类B 创建Pizza的子类C
 *     第二层     创建Pizza的抽象类(创建方法是工厂方法)
 *     第三层   PizzaA pizzaB PizzaC
 *
 * 抽象工厂模式：
 *
 *    工厂实现类A 工厂实现类B 工厂实现类C (其中每个工厂实现类，都可以认为是创建Pizza的类和Pizza实体之间的单抽象层)
 *          工厂接口
 *
 * 工厂模式：通过增加抽象层，实现多对多关系的解耦合，也就是多对-抽象层-对多，抽象层的设计尽量要做到和较多的对象只产生一层关联 也就是原本多对多的关系
 * 经过抽象层，变为了多对一对多！
 */
public class Start {
    public static void main(String[] args) {
        AbsFactory BjAbsFactory = new BJFactory();
        new OrderPizza(BjAbsFactory);
    }
}
