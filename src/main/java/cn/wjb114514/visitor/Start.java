package cn.wjb114514.visitor;

/**
 * 需求：观众分为 男人和女人， 对歌手进行评分 [成功，失败]
 * 传统做法：
 * Person类 是 Man和Women的父类。如果评分增加一个 待定。这就需要添加if-else判断
 * 如果新增一个 青年/小孩 需要增加一个新类 并重复if-else判断、
 * 添加主体可以 ==> 接口编程
 * 修改源代码 ==> 违反ocp
 *
 * 访问者模式：封装一些作用于某些数据结构的各元素的操作，可以在不改变数据结构的前提下，定义作用于这些元素的新的操作。
 * 要看清楚每个设计模式都把谁和谁完成了解耦，命令模式把 命令发起者和命令执行者解耦
 * 而本模式 把 数据结构本身，和操作进行了解耦！
 * visitor pattern
 * 工作原理：在被访问的类里，增加一个对外提供待访问者的接口、
 * 关键场景：对一个对象结构中的对象 进行很多不同操作， [!!操作之间无关联，比如评分中的 优秀/差...] 同时避免这些操作 污染这些对象的类
 */
public class Start {
}
