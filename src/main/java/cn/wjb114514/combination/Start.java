package cn.wjb114514.combination;

/**
 * 需求：学校院系展示
 * 要在一个页面中，展示学校以及下面的学院专业
 *
 *          传统做法
 *
 *          学校
 *          学院
 *          系
 *          三者是继承关系。
 *
 *          1.将学院看做是学校的子类，系是学院的子类。实际上是站在组织大小来进行层次划分的。实际上我们的需求是为了方便管理，而使用继承是明显不利于管理的。
 *          因为使用继承，管理父类时还要关注子类的变化，十分不方便
 *          2.解决方法：把学校，学院，系都看做组织结构，他们之前不存在继承关系，而是[树形结构] 可以更好地管理 ==> 组合模式
 *
 *          Composite Pattern 组合模式，又叫部分 整体模式，ta创建了对象组的树形结构，将对象组合为树状模式 以表示 整体-部分的 层次关系
 *          结构型模式。组合模式使得用户和组合对象的访问具有一致性
 *
 *          原理：
 *          Component:这是组合中的一个 对象声明接口，适当情况下实现所有类共有的接口默认行为，这就是一个行为规范
 *          用于访问和管理Component的子部件
 *
 *          Leaf：叶子结点：此节点没有更细的划分，也就是子节点，他是被管理的一方
 *          Composite: 用于存储子部件： 在Component接口中 实现子部件的相关操作。比如增加，删除... 非叶子结点
 *          叶子没有孩子，不能操作孩子，但其定义组合内元素的行为
 *          组合Composite可以操作子节点和叶子，但可能不具有叶子的某些行为
 *
 *          解决问题：当我们要处理的对象可以生成一颗树形结构，而且要对树上节点和叶子进行操作时，要求可以提供一致的方式，无需考虑是叶子还是孩子
 *          比如学校-学院-系 或者 一级类型-二级类型-多级类型...
 */
public class Start {
}
