package cn.wjb114514.Mediator;

/**
 * 需求： 智能家庭管理问题
 * 智能家庭包括各种设备。
 * 主人要看电视时，各个设备可以协同工作，自动完成看电视的准备工作
 * 闹钟打开 ==> 咖啡机打开 ==> TVd打开 ==> 窗帘拉开 [ 这样而言，对Client，系统内部调用过于复杂，
 * 租房流程
 * 客户 ====> HouseMaster ====> House
 *              ↓    ↓
 *              Wife father
 *
 * 客户负责买房子，目标就是 getHouse() 如果客户直接和房东进行耦合，如果房东的业务过于复杂，对客户而言是不利的
 * ==> 改进 在客户和房东 引入一个中介，客户可以从中介直接获取房子
 * 并且，子系统之间也不要相互交互，而是通过中介来互相关联。
 * 也就是上面的租房例子，如果房东要和 妻子进行协商，房东不直接和妻子交流，如果这么做，就要在房东类里提供一个 聚合妻子类的方法，对二者都不能达到封闭
 *
 *
 * 可以看到，设计模式 主要遵守单一职责原则
 * 即客户只负责买房，房东的各个子系统都负责自己的工作，
 * 而一切的一切，都引入一个中间类 中介对象 完成彼此的协调。
 * 如果不采取中介模式，子系统之间耦合大，比如上面的房东对象==> 一个房东类既要实现卖房子职责，还要完成协调Wife类的职责，还要完成协调Father类的职责
 * 这就是极为不利的。我们引入中介，让房东类只负责卖房职责，Wife类只负责和老婆的协调职责... 争取让一个类只完成一个功能..
 *
 *
 * 中介者模式： 用一个中介对象来封装一系列的对象交换。 各个对象之间的调用，不需要知道内部细节，只需要提供一个接口。
 * 应用：在前后端对象的交互中，MVC模式就是中介者
 *
 *    View ->  Controller -> View
 *               ↑
 *               Model
 *               可以看到 Controller 起到了调节model和view的 功能，使得model和view不直接沟通，完成解耦合
 *
 *
 *  总结： 多个类相互耦合。形成网状结构
 *  而引入中介者后，形成星型结构
 *  * ==> 就是这么个结构，中间就是中介者，协调星星的各条边。
 *  减少类键依赖，降低耦合，，符合迪米特
 *  中介者承担较多责任，一旦中介者有问题，整体系统受影响 [中心化的缺点]
 *  如果中介者业务逻辑太过复杂，会导致中介者类及其臃肿，难以修改，维护性差，谨慎使用。
 *  */
public class Start {
}
